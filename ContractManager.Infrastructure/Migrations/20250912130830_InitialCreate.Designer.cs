// <auto-generated />
using System;
using ContractManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContractManager.Infrastructure.Migrations
{
    [DbContext(typeof(ContractManagerDbContext))]
    [Migration("20250912130830_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContractManager.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAction")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EntiteId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Avenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContratId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateModification")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContratId");

                    b.ToTable("Avenants");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.ChampObligatoire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EstRequis")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MessageErreur")
                        .HasColumnType("longtext");

                    b.Property<string>("NomChamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("TypeChamp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TypeContratId")
                        .HasColumnType("int");

                    b.Property<string>("ValeurParDefaut")
                        .HasColumnType("longtext");

                    b.Property<string>("ValidationRegex")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypeContratId");

                    b.ToTable("ChampsObligatoires");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Contrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateFin")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EmployeId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TypeContratId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeId");

                    b.HasIndex("SocieteId");

                    b.HasIndex("TypeContratId");

                    b.ToTable("Contrats");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContenuHtml")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContratId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ModeleDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ContratId");

                    b.HasIndex("ModeleDocumentId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.EtapeWorkflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateAction")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Ordre")
                        .HasColumnType("int");

                    b.Property<string>("RoleValidateur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("EtapeWorkflows");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.ModeleDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContenuTemplate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ModeleDocuments");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EstLue")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Pays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodeISO")
                        .HasColumnType("longtext");

                    b.Property<string>("Devise")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EstActif")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.RegleLegale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DureeMaxMois")
                        .HasColumnType("int");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("ReglesRenouvellement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.ToTable("ReglesLegales");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.RegleTypeContrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AutresRegles")
                        .HasColumnType("longtext");

                    b.Property<int?>("DureeMaxMois")
                        .HasColumnType("int");

                    b.Property<int>("PaysId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodeEssaiMaxJours")
                        .HasColumnType("int");

                    b.Property<int?>("PreavisMinJours")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalaireMinimum")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TypeContratId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.HasIndex("TypeContratId");

                    b.ToTable("ReglesTypeContrats");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("PaysId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Ville")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("PaysId");

                    b.ToTable("Societes");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.TypeContrat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DureeDefautMois")
                        .HasColumnType("int");

                    b.Property<bool>("EstActif")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModeleDocumentId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PeriodeEssaiDefautJours")
                        .HasColumnType("int");

                    b.Property<int?>("PreavisDefautJours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModeleDocumentId");

                    b.ToTable("TypeContrats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            EstActif = true,
                            Nom = "CDI"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            EstActif = true,
                            Nom = "CDD"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            EstActif = true,
                            Nom = "Stage"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            EstActif = true,
                            Nom = "Intérim"
                        });
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("MotDePasseHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Variables");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContratId")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ContratId")
                        .IsUnique();

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Avenant", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Contrat", "Contrat")
                        .WithMany("Avenants")
                        .HasForeignKey("ContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrat");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.ChampObligatoire", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Pays", "Pays")
                        .WithMany("ChampsObligatoires")
                        .HasForeignKey("PaysId");

                    b.HasOne("ContractManager.Domain.Entities.TypeContrat", "TypeContrat")
                        .WithMany("ChampsObligatoires")
                        .HasForeignKey("TypeContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");

                    b.Navigation("TypeContrat");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Contrat", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Employe", "Employe")
                        .WithMany("Contrats")
                        .HasForeignKey("EmployeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManager.Domain.Entities.Societe", "Societe")
                        .WithMany("Contrats")
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManager.Domain.Entities.TypeContrat", "TypeContrat")
                        .WithMany("Contrats")
                        .HasForeignKey("TypeContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");

                    b.Navigation("Societe");

                    b.Navigation("TypeContrat");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Document", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Contrat", "Contrat")
                        .WithMany("Documents")
                        .HasForeignKey("ContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManager.Domain.Entities.ModeleDocument", "ModeleDocument")
                        .WithMany()
                        .HasForeignKey("ModeleDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contrat");

                    b.Navigation("ModeleDocument");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Employe", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Utilisateur", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.EtapeWorkflow", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId");

                    b.HasOne("ContractManager.Domain.Entities.Workflow", "Workflow")
                        .WithMany("Etapes")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.RegleLegale", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.RegleTypeContrat", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Pays", "Pays")
                        .WithMany("ReglesLegales")
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContractManager.Domain.Entities.TypeContrat", "TypeContrat")
                        .WithMany("ReglesLegales")
                        .HasForeignKey("TypeContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pays");

                    b.Navigation("TypeContrat");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Societe", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Pays", "Pays")
                        .WithMany("Societes")
                        .HasForeignKey("PaysId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.TypeContrat", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.ModeleDocument", "ModeleDocument")
                        .WithMany()
                        .HasForeignKey("ModeleDocumentId");

                    b.Navigation("ModeleDocument");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Workflow", b =>
                {
                    b.HasOne("ContractManager.Domain.Entities.Contrat", "Contrat")
                        .WithOne("Workflow")
                        .HasForeignKey("ContractManager.Domain.Entities.Workflow", "ContratId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contrat");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Contrat", b =>
                {
                    b.Navigation("Avenants");

                    b.Navigation("Documents");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Employe", b =>
                {
                    b.Navigation("Contrats");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Pays", b =>
                {
                    b.Navigation("ChampsObligatoires");

                    b.Navigation("ReglesLegales");

                    b.Navigation("Societes");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Societe", b =>
                {
                    b.Navigation("Contrats");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.TypeContrat", b =>
                {
                    b.Navigation("ChampsObligatoires");

                    b.Navigation("Contrats");

                    b.Navigation("ReglesLegales");
                });

            modelBuilder.Entity("ContractManager.Domain.Entities.Workflow", b =>
                {
                    b.Navigation("Etapes");
                });
#pragma warning restore 612, 618
        }
    }
}
